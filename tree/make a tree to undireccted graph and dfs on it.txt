/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {
        unordered_map<TreeNode*,TreeNode*> parent;
        dfs(root,NULL,parent);
        queue<TreeNode*> q;
        q.push(NULL);
        q.push(target);
        vector<int> ans;
        unordered_set<TreeNode*> seen;
        seen.insert(target);
        seen.insert(NULL);
        int dist=0;
        while(!q.empty())
        {
         TreeNode* node=q.front();
            q.pop();
         if(node==NULL)
         {
             
             if(dist==K)
             {
                while(!q.empty())
                {
                    TreeNode* temp=q.front();
                    q.pop();
                    ans.push_back(temp->val);
                    
                }
               
                 return ans;
             }
             
             q.push(NULL);
              dist++;
         }
            else
            {
                if(seen.find(node->left)==seen.end())
                {
                    seen.insert(node->left);
                    q.push(node->left);
                }
                if(seen.find(node->right)==seen.end())
                {
                    seen.insert(node->right);
                    q.push(node->right);
                }
                TreeNode* par=parent[node];
                if(seen.find(par)==seen.end())
                {
                    seen.insert(par);
                    q.push(par);
                }
                
            }
        }
        return ans;
    }
    void dfs(TreeNode* node,TreeNode* par,unordered_map<TreeNode*,TreeNode*> &parent)
    {
        if(node!=NULL)
        {
            parent[node]=par;
            dfs(node->left,node,parent);
            dfs(node->right,node,parent);
        }
    }
};