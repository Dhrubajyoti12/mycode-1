#include <iostream>
#include<algorithm>
#include<vector>
#include<unordered_map>
using namespace std;
unordered_map<int,vector<int>> adj;
vector<int> dp0,dp1,dp2;
void solve(int u,int pu)
{
    int a=0,b=0,c=0,ans=1e6;
    for(int i=0;i<adj[u].size();i++)
    {
        int v=adj[u][i];
        if(pu==v) continue;
        solve(v,u);
        a+=dp1[v];
        b+=min(dp1[v],dp2[v]);
        c+=min({dp0[v],dp1[v],dp2[v]});
    }
   for(int i=0;i<adj[u].size();i++)
   {
       int v=adj[u][i];
       if(pu==v) continue;
       ans=min(ans,b-min(dp1[v],dp2[v])+dp2[v]);
   }
   dp0[u]=a;
   dp1[u]=ans;
   dp2[u]=1+c;
}
int main()
{
  int n;
  cout<<"enter n"<<endl;
  cin>>n;
  dp0.resize(n+1);
  dp1.resize(n+1);
  dp2.resize(n+1);
  int m;
  cout<<"enter the number of edges"<<endl;
  cin>>m;
  cout<<"Enter the edges"<<endl;
  for(int i=0;i<m;i++)
  {
      int a,b;
      cin>>a>>b;
      adj[a].push_back(b);
      adj[b].push_back(a);
  }
  solve(1,0);
  cout<<endl;
  cout<<min(dp1[1],dp2[1]);
}
